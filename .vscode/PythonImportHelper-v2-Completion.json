[
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Api",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "DevConfig",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "extensions",
        "description": "extensions",
        "isExtraImport": true,
        "detail": "extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "extensions",
        "description": "extensions",
        "isExtraImport": true,
        "detail": "extensions",
        "documentation": {}
    },
    {
        "label": "Migrate",
        "importPath": "flask_migrate",
        "description": "flask_migrate",
        "isExtraImport": true,
        "detail": "flask_migrate",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "backend.models",
        "description": "backend.models",
        "isExtraImport": true,
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.migrations.versions.029d7296bd59_add_user_table",
        "description": "backend.migrations.versions.029d7296bd59_add_user_table",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=25), nullable=False),\n    sa.Column('email', sa.String(length=80), nullable=False),\n    sa.Column('password', sa.Text(), nullable=False),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('username')\n    )",
        "detail": "backend.migrations.versions.029d7296bd59_add_user_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.migrations.versions.029d7296bd59_add_user_table",
        "description": "backend.migrations.versions.029d7296bd59_add_user_table",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('user')\n    # ### end Alembic commands ###",
        "detail": "backend.migrations.versions.029d7296bd59_add_user_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "backend.migrations.versions.029d7296bd59_add_user_table",
        "description": "backend.migrations.versions.029d7296bd59_add_user_table",
        "peekOfCode": "revision = '029d7296bd59'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=25), nullable=False),\n    sa.Column('email', sa.String(length=80), nullable=False),",
        "detail": "backend.migrations.versions.029d7296bd59_add_user_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "backend.migrations.versions.029d7296bd59_add_user_table",
        "description": "backend.migrations.versions.029d7296bd59_add_user_table",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=25), nullable=False),\n    sa.Column('email', sa.String(length=80), nullable=False),\n    sa.Column('password', sa.Text(), nullable=False),",
        "detail": "backend.migrations.versions.029d7296bd59_add_user_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "backend.migrations.versions.029d7296bd59_add_user_table",
        "description": "backend.migrations.versions.029d7296bd59_add_user_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=25), nullable=False),\n    sa.Column('email', sa.String(length=80), nullable=False),\n    sa.Column('password', sa.Text(), nullable=False),\n    sa.PrimaryKeyConstraint('id'),",
        "detail": "backend.migrations.versions.029d7296bd59_add_user_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "backend.migrations.versions.029d7296bd59_add_user_table",
        "description": "backend.migrations.versions.029d7296bd59_add_user_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=25), nullable=False),\n    sa.Column('email', sa.String(length=80), nullable=False),\n    sa.Column('password', sa.Text(), nullable=False),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('username')",
        "detail": "backend.migrations.versions.029d7296bd59_add_user_table",
        "documentation": {}
    },
    {
        "label": "get_engine",
        "kind": 2,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "def get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "get_engine_url",
        "kind": 2,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "def get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(\n            '%', '%%')\n    except AttributeError:\n        return str(get_engine().url).replace('%', '%%')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "get_metadata",
        "kind": 2,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "def get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "logger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_db",
        "kind": 5,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "target_db = current_app.extensions['migrate'].db\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "class Config:\n    SECRET_KEY = config('SECRET_KEY')\n    SQLALCHEMY_TRACK_MODIFICATIONS = config('SQLALCHEMY_TRACK_MODIFICATIONS', cast=bool)\nclass DevConfig(Config):\n    SQLALCHEMY_DATABASE_URI = \"sqlite:///\" + os.path.join(BASE_DIR, \"dev.db\")\n    DEBUG = True\n    SQLALCHEMY_ECHO = True\nclass ProdConfig(Config):\n    pass\nclass TestConfig(Config):",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "DevConfig",
        "kind": 6,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "class DevConfig(Config):\n    SQLALCHEMY_DATABASE_URI = \"sqlite:///\" + os.path.join(BASE_DIR, \"dev.db\")\n    DEBUG = True\n    SQLALCHEMY_ECHO = True\nclass ProdConfig(Config):\n    pass\nclass TestConfig(Config):\n    pass",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "ProdConfig",
        "kind": 6,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "class ProdConfig(Config):\n    pass\nclass TestConfig(Config):\n    pass",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "TestConfig",
        "kind": 6,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "class TestConfig(Config):\n    pass",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.realpath(__file__))\nclass Config:\n    SECRET_KEY = config('SECRET_KEY')\n    SQLALCHEMY_TRACK_MODIFICATIONS = config('SQLALCHEMY_TRACK_MODIFICATIONS', cast=bool)\nclass DevConfig(Config):\n    SQLALCHEMY_DATABASE_URI = \"sqlite:///\" + os.path.join(BASE_DIR, \"dev.db\")\n    DEBUG = True\n    SQLALCHEMY_ECHO = True\nclass ProdConfig(Config):\n    pass",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "backend.extensions",
        "description": "backend.extensions",
        "peekOfCode": "db = SQLAlchemy()",
        "detail": "backend.extensions",
        "documentation": {}
    },
    {
        "label": "HelloResource",
        "kind": 6,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "class HelloResource(Resource):\n    def get(self):\n        return {'message': 'Hello World'}\n@api.route('/recipes')\nclass RecipeResource(Resource):\n    @api.marshal_list_with(recipe_model)\n    def get(self):\n        #get all recipes\n        recipes=Recipe.query.all()\n        return recipes",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "RecipeResource",
        "kind": 6,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "class RecipeResource(Resource):\n    @api.marshal_list_with(recipe_model)\n    def get(self):\n        #get all recipes\n        recipes=Recipe.query.all()\n        return recipes\n    @api.marshal_with(recipe_model)\n    def post(self):\n        #create new recipek\n        data=request.get_json()",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "RecipeResource",
        "kind": 6,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "class RecipeResource(Resource):\n    @api.marshal_with(recipe_model)\n    def get(self,id):\n        #get a recipe by id\n        recipe=Recipe.query.get_or_404(id)\n        return recipe\n    @api.marshal_with(recipe_model)\n    def put(self,id):\n        #update a recipe by id\n        recipe_to_update=Recipe.query.get_or_404(id)",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "RecipeResource",
        "kind": 6,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "class RecipeResource(Resource):\n    @api.marshal_list_with(recipe_model)\n    @api.doc(description=\"Get all recipes\")\n    def get(self):\n        # get all recipes\n        recipes = Recipe.query.all()\n        return recipes\n    @api.doc(description=\"Create a new recipe\")\n    def post(self):\n        # create new recipe",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "make_shell_context",
        "kind": 2,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "def make_shell_context():\n    return {'db': db, 'Recipe': Recipe}\nif __name__ == '__main__':\n    app.run()",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "app = Flask(__name__)\napp.config.from_object(DevConfig)\ndb.init_app(app)\nmigrate=Migrate(app,db)\napi = Api(app, doc='/docs')\n\"\"\"\nfrom flask import Blueprint\nfrom backend.models import Recipe\n# Create a Flask-RESTx Blueprint\nblueprint = Blueprint('api', __name__, url_prefix='/api')",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "api = Api(app, doc='/docs')\n\"\"\"\nfrom flask import Blueprint\nfrom backend.models import Recipe\n# Create a Flask-RESTx Blueprint\nblueprint = Blueprint('api', __name__, url_prefix='/api')\n# Initialize the Flask-RESTx Api with the Blueprint\napi = Api(blueprint, doc='/docs')\n# Register the Blueprint with the Flask App\napp.register_blueprint(blueprint)",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "blueprint",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "blueprint = Blueprint('api', __name__, url_prefix='/api')\n# Initialize the Flask-RESTx Api with the Blueprint\napi = Api(blueprint, doc='/docs')\n# Register the Blueprint with the Flask App\napp.register_blueprint(blueprint)\n\"\"\"\n#model (serializer)\nrecipe_model=api.model('Recipe',{\n    'id': fields.Integer(),\n    'title': fields.String(),",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "api = Api(blueprint, doc='/docs')\n# Register the Blueprint with the Flask App\napp.register_blueprint(blueprint)\n\"\"\"\n#model (serializer)\nrecipe_model=api.model('Recipe',{\n    'id': fields.Integer(),\n    'title': fields.String(),\n    'description': fields.String()\n})",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "kind": 6,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "class Recipe:\n    id:int primary key\n    title:str\n    description:str (text)\n\"\"\"\nclass Recipe(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    title = db.Column(db.String(), nullable=False)\n    description = db.Column(db.Text(), nullable=False)\n    def __repr__(self):",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "kind": 6,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "class Recipe(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    title = db.Column(db.String(), nullable=False)\n    description = db.Column(db.Text(), nullable=False)\n    def __repr__(self):\n        return f\"<Recipe {self.title}>\"\n    def save(self):\n        db.session.add(self)\n        db.session.commit()\n    def delete(self):",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "class User:\n    id:integer\n    username:string\n    email:string\n    password:string\n\"\"\"\nclass User(db.Model):\n    id=db.Column(db.Integer, primary_key=True)\n    username=db.Column(db.String(25), nullable=False,unique=True)\n    email=db.Column(db.String(80), nullable=False)",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "class User(db.Model):\n    id=db.Column(db.Integer, primary_key=True)\n    username=db.Column(db.String(25), nullable=False,unique=True)\n    email=db.Column(db.String(80), nullable=False)\n    password=db.Column(db.Text(), nullable=False)\n    def __repr__(self):\n        return f\"<User {self.username}>\"",
        "detail": "backend.models",
        "documentation": {}
    }
]